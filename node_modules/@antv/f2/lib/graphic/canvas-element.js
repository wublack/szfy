"use strict";

var Util = require('../util/common');

var CanvasElement =
/*#__PURE__*/
function () {
  function CanvasElement(ctx) {
    this.context = ctx; // canvas实际的宽高 (width/height) * pixelRatio

    this.width = 0;
    this.height = 0;
    this.style = {};
    this.currentStyle = {}; // 用来标识是CanvasElement实例

    this.isCanvasElement = true; // 实现简单的事件机制

    this.__events = {};
  }

  var _proto = CanvasElement.prototype;

  _proto.getContext = function getContext()
  /* type */
  {
    return this.context;
  };

  _proto.getBoundingClientRect = function getBoundingClientRect() {
    var width = this.width;
    var height = this.height; // 默认都处理成可视窗口的顶部位置

    return {
      top: 0,
      right: width,
      bottom: height,
      left: 0
    };
  };

  _proto.addEventListener = function addEventListener(type, listener) {
    var events = this.__events[type] || [];
    events.push(listener);
    this.__events[type] = events;
  };

  _proto.removeEventListener = function removeEventListener(type) {
    delete this.__events[type];
  };

  _proto.dispatchEvent = function dispatchEvent(type, e) {
    var _this = this;

    if (Util.isObject(type)) {
      e = type;
      type = e && e.type;
    }

    if (!type) {
      return;
    }

    var events = this.__events[type];

    if (!events || !events.length) {
      return;
    }

    events.forEach(function (listener) {
      listener.call(_this, e);
    });
  };

  return CanvasElement;
}();

function supportEventListener(canvas) {
  if (!canvas) {
    return false;
  } // 非 HTMLCanvasElement


  if (canvas.nodeType !== 1 || !canvas.nodeName || canvas.nodeName.toLowerCase() !== 'canvas') {
    return false;
  } // 微信小程序canvas.getContext('2d')时也是CanvasRenderingContext2D
  // 也会有ctx.canvas, 而且nodeType也是1，所以还要在看下是否支持addEventListener


  var support = false;

  try {
    canvas.addEventListener('eventTest', function () {
      support = true;
    });
    canvas.dispatchEvent(new Event('eventTest'));
  } catch (error) {
    support = false;
  }

  return support;
}

module.exports = {
  create: function create(ctx) {
    if (!ctx) {
      return null;
    }

    if (supportEventListener(ctx.canvas)) {
      return ctx.canvas;
    }

    return new CanvasElement(ctx);
  }
};